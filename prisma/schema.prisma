
generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/gold-standard-gbp-app/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Optional for OAuth users
  plan          Plan      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  usage         Usage[]
  businesses    Business[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Business {
  id            String   @id @default(cuid())
  userId        String
  googleId      String   @unique
  name          String
  address       String?
  phoneNumber   String?
  websiteUrl    String?
  category      String?
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts         Post[]
}

model Post {
  id          String     @id @default(cuid())
  title       String
  content     String     @db.Text
  type        PostType
  status      PostStatus @default(DRAFT)
  imageUrl    String?
  scheduledAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  businessId  String?
  googlePostId String?   @unique
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  business    Business?  @relation(fields: [businessId], references: [id], onDelete: SetNull)

  // Event-specific fields
  eventStartDate DateTime?
  eventEndDate   DateTime?
  eventLocation  String?

  // Offer-specific fields
  offerValidUntil DateTime?
  offerTerms      String?
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  month     Int
  year      Int
  postCount Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, month, year])
}

enum Plan {
  FREE
  UNLIMITED
}

enum PostType {
  UPDATE
  EVENT
  OFFER
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
}
